openapi: 3.0.3
info:
  title: API Gestion Annonces Immobilières
  description: "API REST pour la gestion des annonces immobilières, incluant la création, modification, et consultation des annonces et des utilisateurs, avec gestion des questions et réponses."
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:8080
tags:
- name: users
  description: Opérations relatives aux utilisateurs.
- name: annonces
  description: Opérations relatives aux annonces.
- name: questions
  description: Opérations relatives aux questions posées sur les annonces.
- name: reponses
  description: Opérations relatives aux réponses des agents immobiliers.
paths:
  /user:
    post:
      tags:
      - users
      summary: Créer un nouvel utilisateur
      description: "Permet à tout utilisateur, même non connecté, de créer un compte."
      operationId: createUser
      requestBody:
        description: Objet utilisateur créé
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: exemple@mail.com
              password: password123
              name: Jean Dupont
              role: client
        required: true
      responses:
        "201":
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Informations utilisateur invalides
        "422":
          description: Exception de validation
      x-swagger-router-controller: Users
  /users/{email}:
    get:
      tags:
      - users
      summary: Récupérer les informations d'un utilisateur par e-mail
      description: Récupère les détails d'un utilisateur en fonction de son adresse e-mail.
      operationId: getUserByEmail
      parameters:
      - name: email
        in: path
        description: Adresse e-mail de l'utilisateur à récupérer
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: email
      responses:
        "200":
          description: Informations de l'utilisateur récupérées avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Adresse e-mail invalide
        "404":
          description: Utilisateur non trouvé
      x-swagger-router-controller: Users
  /annonce:
    post:
      tags:
      - annonces
      summary: Créer une nouvelle annonce
      description: Permet à un agent immobilier de créer une annonce. Nécessite authentification via Bearer token.
      operationId: createAnnonce
      requestBody:
        description: Objet annonce créée
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annonce'
            example:
              titre: Appartement à louer
              typeBien: location
              statutPublication: publiée
              statutBien: disponible
              description: Appartement lumineux en centre-ville
              prix: 1000
              dateDisponibilite: 2023-11-01
        required: true
      responses:
        "201":
          description: Annonce créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annonce'
        "400":
          description: Informations d'annonce invalides
      security:
        - BearerAuth: []
      x-swagger-router-controller: Annonces
  /annonces:
    get:
      tags:
      - annonces
      summary: Récupérer toutes les annonces
      description: Récupère la liste de toutes les annonces disponibles.
      operationId: getAllAnnonces
      responses:
        "200":
          description: Liste des annonces récupérées avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annonce'
                x-content-type: application/json
      security:
        - BearerAuth: []
      x-swagger-router-controller: Annonces
  /annonces/{id}:
    get:
      tags:
      - annonces
      summary: Récupérer une annonce par ID
      description: Récupère les détails d'une annonce spécifique.
      operationId: getAnnonceById
      parameters:
      - name: id
        in: path
        description: ID de l'annonce à récupérer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Annonce récupérée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annonce'
        "404":
          description: Annonce non trouvée
      x-swagger-router-controller: Annonces
    put:
      tags:
      - annonces
      summary: Modifier une annonce
      description: Permet à un agent de modifier une annonce existante. Nécessite authentification via Bearer token.
      operationId: updateAnnonce
      parameters:
      - name: id
        in: path
        description: ID de l'annonce à modifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Objet annonce modifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annonce'
        required: true
      responses:
        "200":
          description: Annonce modifiée avec succès
        "400":
          description: Informations d'annonce invalides
        "404":
          description: Annonce non trouvée
      security:
        - BearerAuth: []
      x-swagger-router-controller: Annonces
    delete:
      tags:
      - annonces
      summary: Supprimer une annonce
      description: Permet à un agent de supprimer une annonce. Nécessite authentification via Bearer token.
      operationId: deleteAnnonce
      parameters:
      - name: id
        in: path
        description: ID de l'annonce à supprimer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Annonce supprimée avec succès
        "404":
          description: Annonce non trouvée
      security:
        - BearerAuth: []
      x-swagger-router-controller: Annonces
  /annonces/{id}/questions:
    post:
      tags:
      - questions
      summary: Poser une question sur une annonce
      description: Permet à un utilisateur connecté de poser une question. Nécessite authentification via Bearer token.
      operationId: addQuestion
      parameters:
      - name: id
        in: path
        description: ID de l'annonce concernée
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Contenu de la question posée
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
        required: true
      responses:
        "201":
          description: Question posée avec succès
        "400":
          description: Requête invalide
        "401":
          description: Non autorisé
        "404":
          description: Annonce non trouvée
      security:
        - BearerAuth: []
      x-swagger-router-controller: Questions
  /annonces/{id}/questions/{questionId}/reponses:
    post:
      tags:
      - reponses
      summary: Répondre à une question sur une annonce
      description: Permet à un agent immobilier de répondre à une question. Nécessite authentification via Bearer token.
      operationId: addReponse
      parameters:
      - name: id
        in: path
        description: ID de l'annonce concernée
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: questionId
        in: path
        description: ID de la question à laquelle répondre
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Contenu de la réponse donnée par l'agent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReponseInput'
        required: true
      responses:
        "201":
          description: Réponse ajoutée avec succès
        "400":
          description: Requête invalide
        "401":
          description: Non autorisé
        "404":
          description: Question ou annonce non trouvée
      security:
        - BearerAuth: []
      x-swagger-router-controller: Reponses
components:
  schemas:
    User:
      required:
      - email
      - name
      - password
      - role
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
          - client
          - agent
      example:
        password: password
        role: client
        name: name
        id: id
        email: ""
    Annonce:
      required:
      - dateDisponibilite
      - description
      - prix
      - statutBien
      - statutPublication
      - titre
      - typeBien
      type: object
      properties:
        id:
          type: string
        titre:
          type: string
        typeBien:
          type: string
          enum:
          - vente
          - location
        statutPublication:
          type: string
          enum:
          - publiée
          - non publiée
        statutBien:
          type: string
          enum:
          - disponible
          - loué
          - vendu
        description:
          type: string
        prix:
          type: number
          format: float
        dateDisponibilite:
          type: string
          format: date
        photos:
          type: array
          items:
            type: string
            format: uri
      example:
        prix: 0.8008282
        titre: titre
        statutPublication: publiée
        description: description
        dateDisponibilite: 2000-01-23
        id: id
        typeBien: vente
        statutBien: disponible
        photos:
        - http://example.com/aeiou
        - http://example.com/aeiou
    QuestionInput:
      required:
      - contenu
      type: object
      properties:
        contenu:
          type: string
          description: Contenu de la question posée par l'utilisateur
    Question:
      required:
      - contenu
      - datePosee
      type: object
      properties:
        id:
          type: string
        contenu:
          type: string
        datePosee:
          type: string
          format: date-time
    ReponseInput:
      required:
      - contenu
      type: object
      properties:
        contenu:
          type: string
          description: Contenu de la réponse donnée par l'agent immobilier
    Reponse:
      required:
      - contenu
      - dateReponse
      type: object
      properties:
        id:
          type: string
        contenu:
          type: string
        dateReponse:
          type: string
          format: date-time
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []