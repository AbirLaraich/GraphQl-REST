scalar Date

type User {
  id: ID!
  email: String!
  name: String!
  role: UserRole!
}

enum UserRole {
  client
  agent
}

type Annonce {
  id: ID!
  titre: String!
  description: String
  prix: Float!
  statutPublication: StatutPublication!
  dateDisponibilite: Date!
  typeBien: TypeBien!
  statutBien: StatutBien!
  photos: [String]
  questions: [Question]
}

type Question {
  id: ID!
  contenu: String!
  datePosee: Date!
  reponses: [Reponse]
}

type Reponse {
  id: ID!
  contenu: String!
  dateReponse: Date!
  reponduPar: String!
}

enum TypeBien {
  vente
  location
}

enum StatutPublication {
  publiee
  non_publiee
}

enum StatutBien {
  disponible
  loue
  vendu
}

interface MutationResponse {
  success: Boolean!
  message: String
}

type Query {
  annonces(
    typeBien: TypeBien
    statutBien: StatutBien
    prixMin: Float
    prixMax: Float
  ): [Annonce]!
  
  annonce(id: ID!): Annonce
  
  questions(annonceId: ID!): [Question]!
  
  user(email: String!): User
}

input AnnonceInput {
  titre: String!
  description: String
  prix: Float!
  statutPublication: StatutPublication!
  dateDisponibilite: Date!
  typeBien: TypeBien!
  statutBien: StatutBien!
  photos: [String]
}

input QuestionInput {
  contenu: String!
}

input ReponseInput {
  contenu: String!
}

type AnnonceResponse implements MutationResponse {
  success: Boolean!
  message: String
  annonce: Annonce
}

type QuestionResponse implements MutationResponse {
  success: Boolean!
  message: String
  question: Question
}

type ReponseResponse implements MutationResponse {
  success: Boolean!
  message: String
  reponse: Reponse
}

type UserResponse implements MutationResponse {
  success: Boolean!
  message: String
  user: User
}

type DeleteAnnonceResponse implements MutationResponse {
  success: Boolean!
  message: String
}

type Mutation {
  createAnnonce(input: AnnonceInput!): AnnonceResponse! @auth(requires: agent)
  updateAnnonce(id: ID!, input: AnnonceInput!): AnnonceResponse! @auth(requires: agent)
  deleteAnnonce(id: ID!): DeleteAnnonceResponse! @auth(requires: agent)

  addQuestion(annonceId: ID!, input: QuestionInput!): QuestionResponse!
  addReponse(annonceId: ID!, questionId: ID!, input: ReponseInput!): ReponseResponse! @auth(requires: agent)
  
  createUser(
    email: String!
    password: String!
    name: String!
    role: UserRole!
  ): UserResponse!
}

directive @auth(
  requires: UserRole!
) on FIELD_DEFINITION

directive @include(
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @skip(
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @deprecated(
  reason: String
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE

directive @specifiedBy(
  url: String
) on SCALAR

fragment AnnonceDetails on Annonce {
  id
  titre
  description
  prix
  typeBien
  statutBien
  statutPublication
  dateDisponibilite
}

union SearchResult = Annonce | User

type SearchQuery {
  search(query: String!): [SearchResult] @deprecated(reason: "Utiliser la nouvelle API de recherche")
}